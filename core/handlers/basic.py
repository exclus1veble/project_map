import os
import time
import uuid
import aiohttp
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
import geopandas as gpd
from shapely.geometry import Point, Polygon
from core.keyboards.inline import get_map, events, event_type
from core.utils.states import Steps
from core.settings import settings
from core.utils.dbconnect import Request
from core.middlewares.dbmiddleware import DbSession

custom_polygon = gpd.read_file("media/OSMB_polygon.geojson")


async def get_start(message: Message, request: Request):
    url = f'https://api.telegram.org/bot{settings.bots.bot_token}/getChatMember?chat_id={settings.bots.channel_id}&user_id={message.from_user.id}'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞
            if data.get('ok') and (data.get('result', {}).get('status') in ['member', 'creator']):
                await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.username}, –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω. –í—Å—ë –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö',
                                     reply_markup=events())
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞
            else:
                await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –†–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å, —Å–Ω–æ–≤–∞', reply_markup=get_map())
                await request.add_user(message.from_user.id, message.from_user.first_name)


async def get_location(message: Message, state: FSMContext):
    point = Point(message.location.longitude, message.location.latitude)
    # –µ—Å–ª–∏ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–ª–∏–≥–æ–Ω
    if custom_polygon.contains(point).all():
        await state.update_data(latitude=message.location.latitude)
        await state.update_data(longitude=message.location.longitude)
        await message.answer('–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–æ–∫–∞—Ü–∏—é.\n üì∏ –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n ‚úçÔ∏è –õ–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:')
        await state.set_state(Steps.DESCRIPTION)
    # –µ—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–ª–∏–≥–æ–Ω
    else:
        await message.answer('üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')
        await message.answer(text='üó∫ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏—è')


async def get_photo(message: Message, state: FSMContext):
    save_photo_path = "media/photos"
    photo = message.photo[-1]
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    unique_filename = f"photo_{uuid.uuid4()}.jpg"
    photo_path = os.path.join(save_photo_path, unique_filename)
    await state.update_data(photo=photo_path)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É media
    file_id = photo.file_id
    file_path = await message.bot.get_file(file_id)
    await message.bot.download_file(file_path.file_path, photo_path)
    await message.answer(f"üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n ‚úçÔ∏è –¥–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
    await state.set_state(Steps.DESCRIPTION)


async def get_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(f'‚úçÔ∏è {message.text} \r\n —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è!', reply_markup=event_type())
    await state.set_state(Steps.TYPE_EVENT)




